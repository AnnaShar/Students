using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Queue
{
    class Program
    {
        static void Main(string[] args)
        {
            Queue<int> myQueue = new Queue<int>();
            myQueue.Enqueue(1);
            Console.WriteLine(myQueue.Dequeue());
            myQueue.Enqueue(3);
            myQueue.Enqueue(2);
            myQueue.Enqueue(1);
            Console.WriteLine(myQueue.Peek());
            Console.WriteLine("Count=" + myQueue.Count);
            int[] exampleArray=new int[myQueue.Count];
            exampleArray = myQueue.ToArray();
            for (int i = 0; i < myQueue.Count; i++)
            {
                Console.WriteLine(exampleArray[i]);
            }
            Console.ReadLine();
        }
    }
    class Queue<T>
    {
        private int _count;
        private Element<T> _first;
        private Element<T> _last;
        public int Count
        { get { return _count; } }
        public Queue()
        {
            this._count = 0;
            this._first = null;
            this._last = null;
        }
        public void Enqueue(T item)
        {
            Element<T> newElementInQueue = new Element<T>(item);
            try
            {
                _last.Next = newElementInQueue;
                _last = newElementInQueue;
            }
            catch
            {
                _first = newElementInQueue;
                _last = _first;
            }
            _count++;
        }
        public T Dequeue()
        {
            try
            {
                T elementInQueue = _first.Value;
                if (_count==1)
                {
                    _first = null;
                    _last = null;
                }
                else
                {
                    _first = _first.Next;
                }  
                _count--;
                return elementInQueue;
            }
            catch
            {
                throw new InvalidOperationException("Queue empty.");
            }
        }
        public void Clear()
        {
            _count = 0;
            _first = null;
            _last = null;
        }
        public T Peek()
        {
            try
            {
                return _first.Value;
            }
            catch
            {
                throw new InvalidOperationException("Queue empty.");
            }
        }
        public T[] ToArray()
        {
            Element<T> arrayElement = _first;
            T[] queueArray = new T[_count];
            for (int i = 0; i < _count;i++)
            {
                queueArray[i] = arrayElement.Value;
                arrayElement = arrayElement.Next;
            }
            return queueArray;
        }
    }
    public class Element<T>
    {
        private T _value;
        private Element<T> _next;
        public Element(T value)
        {
            this._value = value;
        }
        public T Value
        {
            get { return _value; }
        }
        public Element<T> Next
        {
            get { return _next; }
            set { _next = value; }
        }
    }
}
